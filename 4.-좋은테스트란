
# 테스트코드의 비밀


## 테스트코드 배포할때는 포함이 되지 않지만 레파지토리에 존재함 
-> 그렇기 때문에 기능이 변경될때마다 테스트코드도 항상 업데이트 해줘야한다. 영원히 **유지보수** 해줘야 한다. -> 그니깐 꺠끗하게 해줘야함
-> 내부 구현 사항을 테스트 X -> 내부 구현이 변경되면 테스트가 안될수도
-> 재사용성을 높이기(테스트 유틸리티)
-> 배포용 코드와 철저히 분리
-> 테스트코드를 통한 문서화


# 테스트코드의 구조
Given : 준비 -> 준비과정을 재사용하게 유틸리티로 정의하는게 좋음
When  : 실행 -> 의도적으로 실패해보는게 좋음
Then  : 검증 -> 마지막에 검증

# 좋은 테스트의 원칙 -> FIRST

F(Fast) : 느린것에 대한 의존성 낮추기-> 테스트를 빈번히 수행 검증하는것이 중요
- 파일접근, 데이터베이스, 네트워크이 느리니깐 에 대한 의존성을 낮추기 -> Mock, Stub등을 사용

I(Isolated) : 독립적으로 최소한의 유닛으로 검증하기
- 독립적이고, 집중적으로 유지

R(Repeatable) : 반복이 가능하게 반들어라 -> 실행할때마다 동일한 결과를 유지
- 다른데스트코드의 의존하거나 네트워크등 불안정한것에 의존하면 발생 가능 -> 환경에 영향을 받지 않도록 작성해야함

S(Self-Validating) : 테스트 결과를 일일히 확인하기에는 어렵다.
- Jest등 라이브러리를 이용하여 스스로 결과를 검증하게 하자.
- 자동화를 통한 검증단계(CI/CD)

T(Timely) : 시기적절하게 테스트 코드 작성
- 사용자에게 배포되기 이전에 테스트코드 작성
- 리팩토링 하기전에 테스크코드를 작성해야함


# 테스트의 범위 ( Right-BICEP )

Right:모든 요구 사항이 정상 동작하는지 확인

B(Boundary Conditions) : 모든 코너 케이스에 대해 테스트를 하기
- 잘못된 포맷, null, 특수무자, 작은숫자, 중복등 모든 케이스에 대해 테스트하기

I(Inverse Relationship) : 역관계를 적용해서 결과값을 확인
-일관성을 유지 ex) 5+5=10 이면 10에서 5를뺴면 5가 되어야함

C(Cross-Check) : 다른 수단을 이용해서 결과값이 맞는지 확인

E(Error Conditions) : 불행한 경로에 대해 우아하게 처리하는가?
- 네트워크에러, 메모리부족, 데이터베이스 중지에 대해 코드가 적당하게 동작하는지

p(Performance Characteristics) : 성능 확인은 테스트를 통해 정확한 수치로 확인
- 성능 개선의 척도와 확인도 데이터를 통해 확인


# 좋은 테스트의 커버리지(Correct)

Conformance : 특정 포맷을 준수 -> 전화번호,이메일,아이디,파일확장자이 다를떄 어떻게 동작하는지
Ordering : 순서 조건 확인하기 -> 배열의 순서가 중요한 경우
Range : 숫자의 범위 -> 제한된 범위보다 작거나 큰 경우에 어떻게 동작하는지 확인
Reference : 외부 의존성 유무, 특정한 조건의 유무 -> ~일때, ~가 되어 있을때, 어떤 특정한 상황/상태일때 이런 동작을 한다.
Existence : 값이 존재하지 않을때 어떻게 동작하는지 확인
Cardinality : 0-1-N 법칙에 따라 검증 -> 하나도 없을떄, 하나만 있을떄, 여러개 있을때
Time : 상대,절대,동시의 일들이 발생했을때 
